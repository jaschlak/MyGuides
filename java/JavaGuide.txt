
****if statements****
int tempf = 36;
if (tempf<=32)
	{
		System.out.println("It is freezing at "+tempf);
	}
else if(tempf >=212)
	{
		System.out.println("It is above boiling at "+tempf);
	}
else
	{
		System.out.println("It is rather nice out at "+tempf);
	}


****switch statement****
switch(var);
	case 0:
	{
		System.out.println("you got 0")
	}
	case 1:
	{
		System.out.println("you got 1")
	}
	default:
	{
		System.out.println("you got something else")
	}


****for loop****

for (initialization; termination; increment)
	{
		statement(i)
	}

int sum=0;
for (int i=0 ; i<=5 ; i++)
	{
		sum=sum+i;
	}


****while loop****
int j = 1;
while(j<=10)
{
	System.out.println("This is line"+j);
	j++;
}



****do while loop****
int j=32;
do 
{
	j++;
	System.out.println("This is line "+j);
}	while(j<=10);


****Declare sizeable array****
int[] arr = new int[10];
	-make sure you do not use the syntax: int[10] arr; Wrong


****matrices****
int[][] matrix = {{1,2,3},{4,5,6},{6,7,8,9,9,9,9,9}};
matrix [i][j];


****Class Access explanation****
int noSpec; // Visible to all classes in the package
public int pubSpec; // Visible to all classes in Java universe
private int priSpec; // Visible only within current class
protected int protSpec; // Visible to all derived classes or classes in this package
	

****Package Handling****
(Both classes import same package)
Class #1:
"
package oop;

public class TestClass 
{
	int noSpec; // Visible to all classes in the package
	public int pubSpec; // Visible to all classes in Java universe
	private int priSpec; // Visible only within current class
	protected int protSpec; // Visible to all derived classes or classes in this package
	
	// These are all local variables
	
}
"

Class #2: (run this class as it has the main class)
"package oop;

public class MainClass 
{

	public static void main(String[] args) 
	{
		TestClass testing = new TestClass();

		testing.noSpec = 32;
		testing.pubSpec = 22;
		//testing.priSpec = 25; Doesn't work because it has been made private
		testing.protSpec = 12;

		// These are all instance variables
	}

}


**** Defining Methods ****

Access Modifiers
public/private/protected

Return Type
Bool/Double/Float/String/Char/Void

parameters = input variables going into the method

Definition:
AccessModifier ReturnType MethodName(Parameters)
{
	body
}

**** Defining Constructors ****

Definition:
AccessModifier ConstructorName(Parameter)
{
body
}


**** Getters/Setters ****

// These are used to modify or obtain private variables

ExampleCode:
Class 1:
"
package getset;

public class TestClass 
{
	private double num1;
	private double num2;

	public double getNum1()
	{
		return num1;
	}
	
	public double getNum2()
	{
		return num2;
	}
	
	public void setNum1(double a)
	{
		num1 = a;
	}
	
	public void setNum2(double a)
	{
		num2 = a;
	}

}
"

Class 2: (run this class as it has the main class)
"
package getset;

public class MainClass
{

	public static void main(String[] args) 
	{
		
		TestClass_GS tester = new TestClass();
		
		System.out.println(tester.getNum1());     	// output: 0
		System.out.println(tester.getNum2()+"\n");	// output: 0
	
		tester.setNum1(5);
		tester.setNum2(10);
		
		System.out.println(tester.getNum1());		// output 5
		System.out.println(tester.getNum2()+"\n"); 	// output 10
			
		

	}

}
"




" *****PolyMorphism*****
method overloading --> Static Polymorphism --> Constructor has the same name, Diff Parameters             --> Compiler Decides what to run
method overriding  --> Dynamic Polymorphism -> Derived Class implements method of Base Class (diff body)  --> RunTime Decides what to run

